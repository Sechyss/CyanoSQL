#!/usr/bin/env pythonimport csv# Import all the packages necessary to do the analysisimport osimport pickleimport pandas as pd# import matplotlib.pyplot as plotfrom Bio import SeqIO# Set of working directory and the files that are going to storage the data run by runos.chdir(    '/Users/u1866168/Documents/OneDrive - University of Warwick/Experiments/GET_HOMOLOGUES/FinalDraftGetHomologues/OMCL_Clusters')PickleCluster = open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_Cluster.pickle", "wb")pickle_dictCreation = {}pickle.dump(pickle_dictCreation, PickleCluster)PickleCluster.close()  # Pickle will store the data as Dictionary class. Input for the last part of the script.for clusters in os.listdir(        '/Users/u1866168/Documents/OneDrive - University of Warwick/Experiments/GET_HOMOLOGUES/FinalDraftGetHomologues/OMCL_Clusters'):    if not clusters.startswith('.') and clusters.endswith('.faa'):        print(clusters)        with open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_Cluster.pickle", "rb") as output2:            pickleDict = pickle.load(output2)        cluster = str(clusters)  # storage of the variable name and the code for the cluster        cluster2 = cluster.replace("'", "")  # this step will remove ' from the cluster's name, later will crash if not.        Array1 = [seq_record.id[3:] for seq_record in SeqIO.parse(clusters, "fasta")]  # Extraction of ID as        # dictionary keys        Array2 = [cluster2] * (len(Array1))  # Cluster associated to ID dictionary        Final_dict = {}        for i in range(len(Array1)):  # Construction of the dictionary and updating of the files            Addition = {Array1[i]: Array2[i]}            Final_dict.update(Addition)        pickleDict.update(Final_dict)        Final = str(Final_dict)        with open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_Cluster.pickle", "wb") as wfp:            pickle.dump(pickleDict, wfp)# Establishment of new files which will store the second part of the code datafilecreation = open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_LocusProtID.pickle", "wb")pickle_intialdict = {}pickle.dump(pickle_intialdict, filecreation)filecreation.close()GeneCsv = csv.writer(    open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/FullListGenesCyanobacteria.csv", "w"))# CSV file will store the data in a previous state to validationos.chdir('/Users/u1866168/Documents/OneDrive - University of Warwick/Genome_Database/Cya_clusterPipeline')# Starting point for the iterator through the files in directoryfor files in os.listdir(        '/Users/u1866168/Documents/OneDrive - University of Warwick/Genome_Database/Cya_clusterPipeline'):    if not files.startswith('.'):        # Setting of variables that will contain the CDS data every run and opening of the files for appending that data        with open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_LocusProtID.pickle",                  "rb") as output2:            pickleDict = pickle.load(output2)        gbank = SeqIO.parse(files, "genbank")  # Genbank parsing        strain = []        cluster = {}        cyanorakclusterid = []        CDS = []        product = []        aaseq = []        ntseq = []        genus = []        for genome in gbank:            for feature in genome.features:                if feature.type == "source":                    strain = str(feature.qualifiers["organism"][0])  # Storage of the variable strain                    if "Prochlorococcus" in strain:                        genus = str("Prochlorococcus")                    else:                        genus = str("Synechococcus")                    continue            for feature in genome.features:  # Due to the diverse gene annotation, try statements are required.                if feature.type == "CDS":  # Apply to those that are not manually created and might have CyaClusterID                    try:                        ID = str(feature.qualifiers["protein_id"][0])                        ID2 = str(feature.qualifiers["locus_tag"][0])                    except:                        ID = str(feature.qualifiers["locus_tag"][0])                        ID2 = str(feature.qualifiers["locus_tag"][0])                    try:                        product = str(feature.qualifiers["product"][0])                    except:                        product = str("Product_non_annotated")                    ntseq = str(feature.extract(genome.seq))                    ntseq2 = feature.extract(genome.seq)                    aaseq = str(ntseq2.translate(table="Bacterial", cds=False, stop_symbol="#", gap=None))                    try:                        for i in range(len(feature.qualifiers["note"])):                            if 'CK_000' in feature.qualifiers["note"][i]:                                cyanorakclusterid = str(feature.qualifiers["note"][i][24:])                            else:                                cyanorakclusterid = str("No_CyaClusterID")                    except:                        cyanorakclusterid = str("No_CyaClusterID")                    try:                        for i in range(len(feature.qualifiers["note"])):                            if 'CK_000' in feature.qualifiers["note"][i]:                                cyanorakclusterid = str(feature.qualifiers["note"][i][24:])                                CDS = [ID2, product, ntseq, aaseq, genus, strain, cyanorakclusterid]                                Addition = {ID: CDS}                                AdditionList = [ID2, product, ntseq, aaseq, genus, strain, cyanorakclusterid]                                cluster.update(Addition)                                GeneCsv.writerow(AdditionList)                    except:                        cyanorakclusterid = str("No_CyaClusterID")                        CDS = [ID2, product, ntseq, aaseq, genus, strain, cyanorakclusterid]                        Addition = {ID: CDS}                        AdditionList = [ID2, product, ntseq, aaseq, genus, strain, cyanorakclusterid]                        cluster.update(Addition)                        GeneCsv.writerow(AdditionList)            Final = str(cluster)            pickleDict.update(cluster)            with open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_LocusProtID.pickle",                      "wb") as wfp:                pickle.dump(pickleDict, wfp)# Starting the third part of the code where it will match the locus_tag/prot_id and cyanorak and Get_homologue clustersos.chdir('/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results')FinalOutput = csv.writer(open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/GeneKeyTable.csv", "w"))# Database with the final outcome for the genkey table.ClusterCktable = csv.writer(    open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/ClusterCKTable.csv", "w"))# Creation of the cluster table for CyanorakClusterGHtable = csv.writer(    open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/ClusterGHTable.csv", "w"))# Creation of the cluster table for GH dataDictionary1 = open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_Cluster.pickle", "rb")Clusters_GH = pickle.load(Dictionary1)  # Input from the first part of the scriptDictionary2 = open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_LocusProtID.pickle", "rb")Database = pickle.load(Dictionary2)  # Input from the second part of the scriptValidation_Dict = {}Keys1 = set(list(Clusters_GH.keys()))Keys2 = set(list(Database.keys()))Intersec = list(set(Keys1) & set(Keys2))# Data from Get_Homologues to fill the GH table.Occupancy = pd.read_csv(    '/Users/u1866168/Documents/OneDrive - University of Warwick/Experiments/Experiments_Python/pangenome_matrix_occupancy_corrected.csv',    index_col='Gene')DictionaryOccupancy = dict(zip(Occupancy.index_genome, Occupancy['Occupancy']))clusterfraction = {}for key in DictionaryOccupancy:    fractiontemp = []    if DictionaryOccupancy[key] == 110:        fractiontemp = "Core"    elif DictionaryOccupancy[key] <= 2:        fractiontemp = "Cloud"    elif DictionaryOccupancy[key] >= 104:        fractiontemp = "Soft_Core"    else:        fractiontemp = "Shell"    clusterfraction.update({key: [DictionaryOccupancy[key], fractiontemp]})with open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_ClusterFraction", "wb") as PickleCluster:    pickle.dump(clusterfraction, PickleCluster)# Assembling of data from Get_Homologues and data obtained from genbank filesfor i in Intersec:  # Creation of Genkey table and CKTable    Completed_dataset1 = [Database[i][0], Database[i][1], Database[i][2], Database[i][3], Database[i][4],                          Database[i][5], Database[i][6], Clusters_GH[i]]    Completed_dataset2 = {        Database[i][0]: [Database[i][1], Database[i][2], Database[i][3], Database[i][4], Database[i][5], Database[i][6],                         Clusters_GH[i]]}    Completed_dataset4 = [Database[i][0], Clusters_GH[i], clusterfraction[Clusters_GH[i]][1]        , clusterfraction[Clusters_GH[i]][0]]    FinalOutput.writerow(Completed_dataset1)    ClusterGHtable.writerow(Completed_dataset4)    Validation_Dict.update(Completed_dataset2)with open("/Users/u1866168/PycharmProjects/Cyanobacteria/Python_results/Dict_ClusterAnalysis.pickle",          "wb") as PickleCluster:    pickle.dump(Validation_Dict, PickleCluster)# Starting point for the comparison between clusters from Cyanorak and GH# elements = list(Validation_Dict.keys())# Cyanoraklist = []# GetHomololist = []# for i in elements:#    if not Validation_Dict[i][#               4] == "No_CyaClusterID":  # Will only validate genes that have been alocated within a Cyanorak cluster#        Cyanoraklist.append(Validation_Dict[i][5])#        GetHomololist.append(Validation_Dict[i][6])# Counting of the number of genes per cluster.# ValidationCyanorak = collections.Counter(Cyanoraklist)# ValidationGetHom = collections.Counter(GetHomololist)# ClusteCya = list(ValidationCyanorak.keys())# Frequency = []# ListCya = []# for i in Validation_Dict:#    if Validation_Dict[i][5] in ClusteCya and Validation_Dict[i][5] not in ListCya:#        n_Cya = ValidationCyanorak[Validation_Dict[i][5]]  # Number of clusters in CyaCluster#        n_GH = ValidationGetHom[Validation_Dict[i][6]]  # Number of cluster in GHCluster#        frecuency = (abs(n_Cya - n_GH)) / (n_GH + n_Cya)  # Relative difference between Cya and GH#        ListCya.append(Validation_Dict[i][5])  # Avoid redundancy in analysis of clusters#        Frequency.append(frecuency)# Plotting of the comparison in a Bar chart# Dictionary = plot.figure()# plot.hist(Frequency)# plot.xlabel('Value of distance')# plot.ylabel('Number of Clusters')# plot.title('Comparison Cyanorak vs OMCL')# plot.show()